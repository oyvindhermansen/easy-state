{"version":3,"sources":["webpack:///path---docs-api-ab6596d766eb1065f375.js","webpack:///./.cache/json/docs-api.json"],"names":["webpackJsonp","321","module","exports","data","markdownRemark","html","frontmatter","path","title","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,4rHAAoxHC,aAAqDC,KAAA,YAAAC,MAAA,oBAA8CC","file":"path---docs-api-ab6596d766eb1065f375.js","sourcesContent":["webpackJsonp([61690332833015],{\n\n/***/ 321:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Easy State provides one function that will be the base of your applications state.\\nThis function is called <code>createStateTree</code>. Here's an example of how you would use it.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> createStateTree <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'easy-state'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> myStore <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStateTree</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ... application state</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>When your state tree is created using <code>createStateTree</code>, it provides you with the following methods:</p>\\n<h3>getState</h3>\\n<p>This method will give you access to your applications current state.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>myStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>setState</h3>\\n<p><code>setState</code> is the only way to change the state of your application.\\nIt takes an argument with your new state. It can be either a plain object, or a callback function. Here's an example</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// With object</span>\\nmyStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//...new state</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// With callback</span>\\nmyStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>prevState <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ... new state</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>subscribe</h3>\\n<p>This is where the magic happens. Rerender once inside the <code>subscribe</code> method and it automatically updates your UI whenever <code>setState</code> is called. <code>Subscribe</code> takes one argument, a callback. Here's an example</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>myStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Do rerendering here once,</span>\\n  <span class=\\\"token comment\\\">// and your state will sync up with your UI automatically</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"path\":\"/docs/api\",\"title\":\"Easy State API\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-api-ab6596d766eb1065f375.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>Easy State provides one function that will be the base of your applications state.\\nThis function is called <code>createStateTree</code>. Here's an example of how you would use it.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> createStateTree <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'easy-state'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> myStore <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createStateTree</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ... application state</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>When your state tree is created using <code>createStateTree</code>, it provides you with the following methods:</p>\\n<h3>getState</h3>\\n<p>This method will give you access to your applications current state.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>myStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>setState</h3>\\n<p><code>setState</code> is the only way to change the state of your application.\\nIt takes an argument with your new state. It can be either a plain object, or a callback function. Here's an example</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code><span class=\\\"token comment\\\">// With object</span>\\nmyStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//...new state</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// With callback</span>\\nmyStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span>prevState <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ... new state</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3>subscribe</h3>\\n<p>This is where the magic happens. Rerender once inside the <code>subscribe</code> method and it automatically updates your UI whenever <code>setState</code> is called. <code>Subscribe</code> takes one argument, a callback. Here's an example</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code>myStore<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">subscribe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prevState<span class=\\\"token punctuation\\\">,</span> nextState<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Do rerendering here once,</span>\\n  <span class=\\\"token comment\\\">// and your state will sync up with your UI automatically</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"path\":\"/docs/api\",\"title\":\"Easy State API\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-api.json\n// module id = 321\n// module chunks = 61690332833015"],"sourceRoot":""}